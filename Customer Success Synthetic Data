import pandas as pd
import numpy as np
import random
from faker import Faker

# Seed for reproducibility
np.random.seed(0)
random.seed(0)

# Create Faker instance for generating fake data
fake = Faker()

# Number of customers
num_customers = 500

# Generate customers data
customers = {
    'customer_id': list(range(1, num_customers + 1)),
    'customer_name': [fake.name() for _ in range(num_customers)],
    'email': [fake.email() for _ in range(num_customers)],
    'phone_number': [fake.phone_number() for _ in range(num_customers)],
    'company_name': [fake.company() for _ in range(num_customers)],
    'industry': [fake.word() for _ in range(num_customers)],
    'customer_size': np.random.choice(['Small', 'Medium', 'Large'], num_customers),
    'products_acquired': [', '.join(random.sample(['ProductA', 'ProductB', 'ProductC', 'ProductD'], random.randint(1, 4))) for _ in range(num_customers)],
    'licenses': np.random.randint(1, 100, size=num_customers),
    'country_id': np.random.randint(1, 11, size=num_customers),  # New column for Location ID
    'annual_revenue': [f"${np.random.randint(100000, 5000000):,}" for _ in range(num_customers)],
    'churn_rate': [f"{random.uniform(1, 20):.2f}%" for _ in range(num_customers)],
}

# Create DataFrame for Customers
customers_df = pd.DataFrame(customers)

# Number of financial records
num_financial_records = 500

# Generate financials data
financials = {
    'customer_id': np.random.choice(customers_df['customer_id'], num_financial_records),
    'financial_year': np.random.randint(2018, 2023, size=num_financial_records),
    'revenue': np.random.randint(100000, 5000000, size=num_financial_records),
    'expenses': np.random.randint(50000, 2000000, size=num_financial_records),
    'profit': np.random.randint(10000, 500000, size=num_financial_records),
}

# Create DataFrame for Financials
financials_df = pd.DataFrame(financials)

# Number of interactions
num_interactions = 2000

# Generate interactions data
interactions = {
    'interaction_id': list(range(1, num_interactions + 1)),
    'customer_id': np.random.choice(customers_df['customer_id'], num_interactions),
    'interaction_date': pd.date_range(start='2022-01-01', end='2023-12-31', freq='H').tolist()[:num_interactions],
    'interaction_type': np.random.choice(['Email', 'Phone Call', 'Meeting'], num_interactions),
    'interaction_details': [fake.sentence() for _ in range(num_interactions)],
}

# Create DataFrame for Interactions
interactions_df = pd.DataFrame(interactions)

# Number of survey responses
num_survey_responses = 500

# Generate satisfaction survey data
survey_responses = {
    'survey_id': list(range(1, num_survey_responses + 1)),
    'customer_id': np.random.choice(customers_df['customer_id'], num_survey_responses),
    'survey_date': pd.date_range(start='2022-01-01', end='2023-12-31', freq='D').tolist()[:num_survey_responses],
    'rating': np.random.randint(1, 6, size=num_survey_responses),
    'feedback': [fake.sentence() for _ in range(num_survey_responses)],
}

# Create DataFrame for Satisfaction Survey
survey_df = pd.DataFrame(survey_responses)

# Number of support tickets
num_support_tickets = 1000

# Generate support ticket data
support_tickets = {
    'ticket_id': list(range(1, num_support_tickets + 1)),
    'customer_id': np.random.choice(customers_df['customer_id'], num_support_tickets),
    'creation_date': pd.date_range(start='2022-01-01', end='2023-12-31', freq='H').tolist()[:num_support_tickets],
    'status': np.random.choice(['Open', 'In-Progress', 'Closed'], num_support_tickets),
    'issue_description': [fake.sentence() for _ in range(num_support_tickets)],
}

# Create DataFrame for Support Tickets
tickets_df = pd.DataFrame(support_tickets)

# Number of locations
num_locations = 10

# Generate locations data
locations = {
    'location_id': list(range(1, num_locations + 1)),
    'country': [fake.country() for _ in range(num_locations)],
    'city': [fake.city() for _ in range(num_locations)],
    'state': [fake.state() for _ in range(num_locations)],
    'postal_code': [fake.zipcode() for _ in range(num_locations)],
}

# Create DataFrame for Locations
locations_df = pd.DataFrame(locations)

# Save DataFrames to CSV files
customers_df.to_csv('customers.csv', index=False)
financials_df.to_csv('financials.csv', index=False)
interactions_df.to_csv('interactions.csv', index=False)
survey_df.to_csv('satisfaction_survey.csv', index=False)
tickets_df.to_csv('support_tickets.csv', index=False)
locations_df.to_csv('locations.csv', index=False)  # New Locations Table
